// <auto-generated-by-uos>
// Please do not modify this file.
// If you want to edit code, switch to local mode.
// 请不要修改此文件。
// 如果您想修改代码，请切换到本地调用模式。
// </auto-generated-by-uos>

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Unity.UOS.Func.Stateless.Client;
using Unity.UOS.Func.Stateless.Core.Attributes;
using Unity.UOS.Func.Stateless.Exceptions;
using UnityEngine;

namespace CloudService 
{
    // add suffix to avoid conflict
    public static class WechatAPIq3k9FwJi5A
    {
        public static string Domain = "stateless.unity.cn";
    }
}

namespace CloudService
{
    // 注意事项
    //
    // 1. 云函数类所在脚本文件的名称必须与类名相同。
    //
    // 2. 所有的类必须放置于命名空间内，且所用到的代码文件必须放到同一目录中。
    //
    // 3. 使用 [CloudService] 标记有远程调用函数的类，使用 [CloudFunc] 标记需要远程调用的函数。
    //
    // 4. 请在云函数类构造函数中初始化云函数，不要创建并调用其他带有参数的构造函数。
    //
    // 5. 切换到远程模式后云函数类只会保留带有 [CloudFunc] 的方法，其他字段将会被隐藏。
    //
    // 6. 使用 [CloudFunc] 标记的函数必须符合 public async Task<返回数据类型> 函数名称(输出参数) { 函数体 } 这样的格式。
    //
    // 7. 编写代码中只能使用 UnityEngine 命名空间下的 Debug.Log，Debug.LogWarning，Debug.LogError 函数，不能使用其他函数。
    //
    public class WeixinLoginResult
    {
        // 可以自行根据微信的返回结果增加字段
        public string openid;
    }

    public class ExternalLoginRequest
    {
        public string externalUserID;
    }

    public class ExternalLoginResponse
    {
        public string personaAccessToken;
        public string personaRefreshToken;
        public int expiresAt;
        public PersonaInfo persona;
    }

    public class PersonaInfo
    {
        public string userID;
        public string personaID;
    }

    [CloudService]
    public class WechatAPI
    {
        [CloudFunc]
        public async Task<ExternalLoginResponse?> WechatLogin(string code)
        {
            var json = "{" + $"\"code\":{JsonConvert.SerializeObject(code)}" + "}";
            var jsonResult = await HttpClient.Call($"https://{WechatAPIq3k9FwJi5A.Domain}/release/467bef3d-c882-473c-9efc-4b4c2921d78f/wechatapi", "wechatlogin", json);
            try
            {
                return JsonConvert.DeserializeObject<ExternalLoginResponse?>(jsonResult);
            }
            catch (Exception ex)
            {
                Debug.LogException(ex);
                throw new ExecuteException(jsonResult);
            }
        }
    }
}